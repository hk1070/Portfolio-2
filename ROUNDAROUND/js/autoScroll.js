//////////////////////////////////////////////////
//////// 원 페이지 자동 스크롤 JS - 메인페이지 ////////
//////////////////////////////////////////////////

//////// 전역변수 구역 /////////////////////////////
// 현재 페이지 번호
let pno = 0; // 현재 페이지 번호
// 전체 페이지 수
let totnum;
// 광스크롤 막기(0-허용,1-불허용)
let psts = 0;
// 전체 윈도우 높이값(페이지이동시 사용!)
let winH = $(window).height();
// 모바일 여부 코드(1-모바일, 0-일반)
let mob = 0;
let winW = $(window).width(); // 윈도우가로크기
if (winW <= 500) mob = 1;
console.log("모바일:" + mob);
/////////////////////////////////////
//////////////////////////////////////////////////

$(function () { ///////////jQB//////////////////////////

    //// 터치방향을 위한 변수 ////
    let tcd1, tcd2;

    if (mob) {
        // 전체 페이지 수
        let totnun = 7;

        ///// 1.터치시작시 화면 터치위치값 변수에 넣기 //////
        // 대상: document
        // 사용위치속성: screenY (페이지이동이 Y축방향이므로!)
        $(document).on("touchstart", function (e) { //e-이벤트전달변수

            // 모바일 터치 위치값 변수에 할당하기
            tcd1 = e.originalEvent.touches[0].screenY;
            console.log("터치시작:" + tcd1);

        }); ////// touchstart 함수 /////////////////////
        ///////////////////////////////////////////////

        ///// 2.터치가 끝날때 화면 터치위치값 변수에 넣기 //////
        // 대상: document
        // 사용위치속성: screenY (페이지이동이 Y축방향이므로!)
        $(document).on("touchend", function (e) { //e-이벤트전달변수

            // 모바일 터치 위치값 변수에 할당하기
            tcd2 = e.originalEvent.changedTouches[0].screenY;
            console.log("터치끝:" + tcd2);

            /// 방향 판별하기 ///////
            let delta = tcd1 - tcd2;
            // 기본 마우스 휠과 같은 변수명 사용함~(편리하려고)
            console.log("차:" + delta);

            /////////////////////////////////////////////////////
            ///////// 여기서부터는 마우스휠코드와 동일함 /////////////
            // 단, 양수/음수의 의미는 다름!

            // 1. 양수: 윗쪽방향 스와이프 -> 스크롤 아래로 -> 페이지번호증가
            if (delta > 0) {
                pno++;
                if (pno === totnum) pno = totnum - 1; //끝번호고정!
            } /////////// if ////////////////////////////////////

            // 2. 음수: 아래쪽방향 스와이프 -> 스크롤 위로 -> 페이지번호감소
            else {
                pno--;
                if (pno < 0) pno = 0; //첫번호고정!
            } /////////// else //////////////////////////////////

            console.log("페이지번호:" + pno);

            // 3. 이동할 페이지(.page)의 위치값 알아내기
            let pgpos = winH * pno;

            // 4. 실제 이동위치로 스크롤 애니메이션 이동하기
            $("html,body").stop().animate({
                scrollTop: pgpos + "px"
            }, 1200, "easeOutQuint"); /// animate ///



        }); ////// touchstart 함수 /////////////////////
        ///////////////////////////////////////////////
        /*
        [ 모바일 이벤트 관련 속성, 컬렉션 ]
        1. originalEvent - 모바일 관련 이벤트 처리 속성
        2. touches[0] - 터치이벤트를 담은 컬렉션 (0번은 담겨진것 하나)
        3. changedTouches[0] - 변경된 터치이벤트를 담은 컬렉션
        */

    } ///////////////////// if /////////////////////////////////////////
    else {
        ////// 자동스크롤 구현////////////
        // 이벤트를 띄어쓰기로 여러개 쓸 수 있음!
        $(document).on("mousewheel DOMMouseScroll", function (e) {
            
            // 전체 페이지 수 
            let totnum = 9;

            //e.preventDefault(); <- 이걸 쓰면 에러가 남!!
            // document, body, window 객체는 막을 수 없다!
            // 여기서는 body에 overflow:hidden 으로 대체함!(스크롤 막기!)

            //////console.log("스크롤중!");

            // 광스크롤 막기 //////////////////////////////////////
            if (psts === 1) return true;
            // return false 하면 에러남! 왜? document니까!법이 바뀜!
            // return true 돌아가되 기능은 켜놓고 가(스크롤되게해)
            // 우리는 이미 overflow:hidden으로 스크롤 막아서 상관없음!
            psts = 1; // 잠금!
            setTimeout(function () {
                psts = 0;
            }, 1200); // setTimeout ////
            /////////////////////////////////////////////////////


            // 1. 마우스휠 방향 알아내기
            e = window.event || e;
            // 이벤트 전달값이 window 오리지널 이벤트가 사용가능하면
            // 사용되도록 보완코드를 작성함!
            // 변수 = 경우1 || 경우2;
            // 변수에 경우1과 경우2 중 true(유효한것)인 것이 할당됨!
            /*
            wheelDelta 라는 값을 알아야 방향을 알 수 있다!
            wheelDelta란?
            - ie, chrome 브라우저 등 공용(opera는 detail을 사용함)
            - 마우스 이벤트에 따라 발생하는 이벤트 횟수 및 방향, 이동거리
            */

            let delta = e.detail ? e.detail : e.wheelDelta;
            // 변수에 유효한 설정이 적용되어 할당됨!


            if (/Firefox/i.test(navigator.userAgent)) {
                delta = -delta; //변수앞에 마이너스쓰면 부호가 반대
            } ///// if ////////


            // 2. 마우스 휠 방향에 따라 페이지 번호 증감!
            if (delta < 0) { //-120 아랫방향 스크롤(다음페이지)
                pno++;
                if (pno === totnum) pno = totnum - 1; // 끝번호 고정!
            } //////// if /////////////////////////////////
            else { // 120 윗방향 스크롤(이전페이지)
                pno--;
                if (pno < 0) pno = 0; // 첫번호 고정
            } ///////// else ///////////////////////////////

            //console.log("페이지번호:" + pno);

            // 3. 이동할 페이지(.page)에 위치값 알아내기
            // -> 위치값은 클래스의 순번으로 알아냄-> pno 변수사용!
            //let pgpos = $(".page").eq(pno).offset().top;
            // offset().top은 현재 선택요소의 top위치값을 리턴함!


            // 기존 위치값 읽어오기 변경!!!
            // 전체 윈도우 높이값(winH)에 페이지 번호를 곱한다!
            let pgpos = winH * pno;
            // 이렇게 하는 이유? 페이지 위치값이 구해졌지만 이동시 sync문제(일치) 문제로
            // 값이 잘 반영되지 않을때 원페이지의 위치 이동을 이렇게 계산해서 이동함!


            ////console.log("이동위치:"+pgpos);

            // 4. 실제 이동위치로 스크롤 애니메이션 이동하기
            $("html,body").stop().animate({
                scrollTop: pgpos + "px"
            }, 1200, "easeInOutQuint"); /////// animate ///////


        }); ////////// mousewheel ////////////////////////////////
        /////////////////////////////////////////////////////////

    } ////////////// else /////////////////////////////////////////////






}); ///////////jQB/////////////////////////////////////
